// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Space {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  title       String
  creator     String
  slug        String      @unique
  image       String
  description String
  url         String?
  admins      String[]
  BudgetBoxes BudgetBox[]
  Categories  Category[]
}

model BudgetBox {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  startDate       DateTime
  endDate         DateTime
  creator         String
  title           String
  image           String
  description     String
  dampingFactor   Float     @default(0.8)
  maxVotesPerUser Int       @default(1)
  maxPairsPerVote Int       @default(20)
  allowlist       String[]
  Projects        Project[]
  Votes           Vote[]
  Space           Space?    @relation(fields: [spaceId], references: [id])
  spaceId         String?
}

model Project {
  id              String       @id @default(cuid())
  owner           String?
  title           String
  url             String?
  description     String?
  image           String?
  BudgetBoxes     BudgetBox[]
  PreferenceBeta  Preference[] @relation("beta")
  PreferenceAlpha Preference[] @relation("alpha")
}

model Vote {
  id          String       @id @default(cuid())
  voter       String
  BudgetBox   BudgetBox?   @relation(fields: [budgetBoxId], references: [id])
  budgetBoxId String?
  Preferences Preference[]
}

model Preference {
  id         String  @id @default(cuid())
  preference Int
  alpha      Project @relation("alpha", fields: [alphaId], references: [id])
  alphaId    String
  beta       Project @relation("beta", fields: [betaId], references: [id])
  betaId     String
  Vote       Vote?   @relation(fields: [voteId], references: [id])
  voteId     String?
}

model Category {
  id       String  @id @default(cuid())
  category String  @unique
  Spaces   Space[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  walletAddress String
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
